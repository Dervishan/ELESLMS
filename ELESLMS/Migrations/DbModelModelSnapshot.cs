// <auto-generated />
using System;
using ELESLMS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ELESLMS.Migrations
{
    [DbContext(typeof(DbModel))]
    partial class DbModelModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ELESLMS.Data.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PointsPossible")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("ELESLMS.Data.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("OpeningDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "efso ders",
                            Name = "cet 301",
                            OpeningDate = new DateTime(2020, 1, 3, 7, 3, 16, 259, DateTimeKind.Local).AddTicks(9498),
                            TeacherId = 3
                        },
                        new
                        {
                            Id = 6,
                            Description = "efso dersin ikincisi",
                            Name = "cet 322",
                            OpeningDate = new DateTime(2020, 1, 3, 7, 3, 16, 260, DateTimeKind.Local).AddTicks(296),
                            TeacherId = 3
                        },
                        new
                        {
                            Id = 7,
                            Description = "muttesem ders",
                            Name = "cet 314",
                            OpeningDate = new DateTime(2020, 1, 3, 7, 3, 16, 260, DateTimeKind.Local).AddTicks(314),
                            TeacherId = 9
                        });
                });

            modelBuilder.Entity("ELESLMS.Data.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("StudentCourseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StudentCourseId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("ELESLMS.Data.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ELESLMS.Data.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Student"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Teacher"
                        });
                });

            modelBuilder.Entity("ELESLMS.Data.StudentCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("FinalGrade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("ELESLMS.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecretAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecretQuestion")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasDiscriminator<int>("RoleId").HasValue(1);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2020, 1, 3, 7, 3, 16, 258, DateTimeKind.Local).AddTicks(4147),
                            EMail = "admin@admin.com",
                            IsDeleted = false,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "First",
                            Password = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918",
                            RoleId = 1,
                            SecretQuestion = 0,
                            Surname = "User",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("ELESLMS.Data.Student", b =>
                {
                    b.HasBaseType("ELESLMS.Data.User");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(2);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2020, 1, 3, 7, 3, 16, 259, DateTimeKind.Local).AddTicks(5027),
                            EMail = "yarali89@gmail.com",
                            IsDeleted = false,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dervişhan",
                            Password = "d8303dd66f288068d9ece3a38092cd3eb16b93672b332f4ae8baa927cfc1aa4e",
                            RoleId = 2,
                            SecretQuestion = 0,
                            Surname = "Sezer",
                            UserName = "Yarali89",
                            Number = "321"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2020, 1, 3, 7, 3, 16, 259, DateTimeKind.Local).AddTicks(5730),
                            EMail = "yakisikli1@gmail.com",
                            IsDeleted = false,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "David",
                            Password = "e22df7824352fc6caaa36d2132faa4f974a9f8cd27774b6a1727a9ae7f0e16ab",
                            RoleId = 2,
                            SecretQuestion = 0,
                            Surname = "Bechkham",
                            UserName = "Yakisikli1",
                            Number = "123"
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2020, 1, 3, 7, 3, 16, 259, DateTimeKind.Local).AddTicks(5833),
                            EMail = "tsubasa333@gmail.com",
                            IsDeleted = false,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cristiano",
                            Password = "0ef15c9323f8f3e16f9ee0f37f6a4bcc18040d210f45d7ada3074650d11d8834",
                            RoleId = 2,
                            SecretQuestion = 0,
                            Surname = "Ronaldı",
                            UserName = "Tsubasa333",
                            Number = "333"
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2020, 1, 3, 7, 3, 16, 259, DateTimeKind.Local).AddTicks(5902),
                            EMail = "whaat2@gmail.com",
                            IsDeleted = false,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Okuttum",
                            Password = "7ba212399865786bddeeae30bcca4d89e29eb10eb56d0100f1570a5a6d7415bc",
                            RoleId = 2,
                            SecretQuestion = 0,
                            Surname = "Bro",
                            UserName = "whaat2",
                            Number = "222"
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2020, 1, 3, 7, 3, 16, 259, DateTimeKind.Local).AddTicks(5971),
                            EMail = "elveda26@gmail.com",
                            IsDeleted = false,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yeter",
                            Password = "d37ec7d7506f856d4dc1a40bc09509e0bd964331b2712f5cb7ca584d39575cae",
                            RoleId = 2,
                            SecretQuestion = 0,
                            Surname = "Bukadar",
                            UserName = "elveda26",
                            Number = "262"
                        });
                });

            modelBuilder.Entity("ELESLMS.Data.Teacher", b =>
                {
                    b.HasBaseType("ELESLMS.Data.User");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(3);

                    b.HasData(
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2020, 1, 3, 7, 3, 16, 259, DateTimeKind.Local).AddTicks(7171),
                            EMail = "huseyinsimsek@gmail.com",
                            IsDeleted = false,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hüseyin",
                            Password = "7f87373c2109e88f1bfcea954c222fa07a5a2b5ab030b0f18e1a3e25b344a4f1",
                            RoleId = 3,
                            SecretQuestion = 0,
                            Surname = "Şimşek",
                            UserName = "HocalarınHocası",
                            Subject = "Programming"
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(2020, 1, 3, 7, 3, 16, 259, DateTimeKind.Local).AddTicks(7777),
                            EMail = "hamdierkunt@gmail.com",
                            IsDeleted = false,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hamdi",
                            Password = "9df61ac8f46d4cda72ec2c09da76335bc3d9b95b9a3670beec3e3b2e1924b860",
                            RoleId = 3,
                            SecretQuestion = 0,
                            Surname = "Erkunt",
                            UserName = "Kral",
                            Subject = "Algorythm"
                        });
                });

            modelBuilder.Entity("ELESLMS.Data.Assignment", b =>
                {
                    b.HasOne("ELESLMS.Data.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ELESLMS.Data.Course", b =>
                {
                    b.HasOne("ELESLMS.Data.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ELESLMS.Data.Grade", b =>
                {
                    b.HasOne("ELESLMS.Data.Assignment", "Assignment")
                        .WithMany("Grades")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ELESLMS.Data.StudentCourse", "StudentCourse")
                        .WithMany("Grades")
                        .HasForeignKey("StudentCourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ELESLMS.Data.StudentCourse", b =>
                {
                    b.HasOne("ELESLMS.Data.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ELESLMS.Data.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ELESLMS.Data.User", b =>
                {
                    b.HasOne("ELESLMS.Data.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
